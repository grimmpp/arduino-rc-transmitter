#include <TFT.h> // Hardware-specific library
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <SoftwareSerial.h>
#include "./RgbLed.cpp"

#include "../RC_Library/RcHelper.h"

SoftwareSerial softSerial(A5, A4); // RX, TX

// LED = 5V
// SCK 13    +  1K Resistor for tft
// SDA = MOSI 11    +  1K Resistor for tft
#define tft_cs   10
#define tft_dc   9    // A0    + 1K Resistor for tft
#define tft_rst  4

// SCK 13
// MISO 12
// MOSI 11
#define nrf_cs 8
#define nrf_ce 7

#define pinLedB 6
#define pinLedR 5
#define pinLedG 3

RgbLed *rgbLed;

unsigned short luminosityLed = 20;
const byte address[] = "00007";

RF24 radio(nrf_ce, nrf_cs); // CE, CSN

TFT TFTscreen = TFT(tft_cs, tft_dc, tft_rst);

Button_Inputs values;
Button_Inputs values_old;

boolean showsInitialize = true;
boolean modeA = true;

#define tft_first_column 0
#define tft_first_row 8
#define tft_last_row 125
#define tft_last_column 159
const char tft_middle_row = (tft_last_row - tft_first_row)/2 + tft_first_row +8;
const char tft_quarter_column = tft_last_column / 4 - 4;



char readData(Button_Inputs* data) {
  char* p = (char*)data;
  char crc =0xff;
  for (int i=0; i < sizeof(Button_Inputs); i++)
  {
    *p = softSerial.read();
    crc ^= *p;
    p++;
  }
    crc ^= softSerial.read();
  return crc == 0x00;
}

void setButtonColorGreen(boolean btnVal) {
  if (btnVal) TFTscreen.fill(0,80,0);
  else TFTscreen.fill(0,0,0);
}


void setButtonColorBlue(boolean btnVal) {
  if (btnVal) TFTscreen.fill(80,0,0);
  else TFTscreen.fill(0,0,0);
}


void showJoyStickScreen(boolean init, boolean showInit, boolean hideInit) {
  char boxLength = 12;
  char shortEdge = boxLength/2;
  char longEdge = boxLength;
  char middleEdge = (shortEdge+longEdge)/2;
  char space = boxLength/6;

  if (hideInit) {
    // remove init text
    TFTscreen.stroke(0,0,0);
    TFTscreen.setTextSize(2);
    TFTscreen.text("Initialize", tft_first_column+4, tft_first_row+4);

    TFTscreen.stroke(80,80,80);
    TFTscreen.setTextSize(1);
    TFTscreen.text("Control IT!", tft_first_column+6, tft_first_row+6);

    showsInitialize = false;
  }

  if (init) {
    // red border
    TFTscreen.stroke(0,0,120);
    TFTscreen.fill(0,0,0);
    TFTscreen.rect(tft_first_column, tft_first_row, tft_last_column-tft_first_column, tft_last_row-tft_first_row);

    // grey center boxes
    TFTscreen.stroke(80,80,80);
    TFTscreen.fill(80,80,80);
    TFTscreen.rect(tft_quarter_column - boxLength/2, tft_middle_row - boxLength/2, boxLength, boxLength);
    TFTscreen.rect(tft_last_column-tft_quarter_column - boxLength/2, tft_middle_row - boxLength/2, boxLength, boxLength);
  }

  //grey rect boxes
  TFTscreen.stroke(80,80,80);
  for(char i=1; i<=3; i++) {
    short upperBorder = 109;
    short lowerBorder = 146;
    // top
    boolean colourizeNew = values.poti_left_Y >= upperBorder + i* 36.5;
    boolean colourizeOld = values_old.poti_left_Y >= upperBorder + i* 36.5;
//Serial.print(i); Serial.print(" poti_left_Y: "); Serial.print(values.poti_left_Y); Serial.print(" "); Serial.println(colourizeNew);
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_quarter_column - longEdge/2, tft_middle_row - space*i - shortEdge*(i+1), longEdge, shortEdge);
    }
    colourizeNew = values.poti_right_Y >= upperBorder + i* 36.5;
    colourizeOld = values_old.poti_right_Y >= upperBorder + i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_last_column-tft_quarter_column - longEdge/2, tft_middle_row - space*i - shortEdge*(i+1), longEdge, shortEdge);
    }
    //bottom
    colourizeNew = values.poti_left_Y <= lowerBorder - i* 36.5;
    colourizeOld = values_old.poti_left_Y <= lowerBorder - i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_quarter_column - longEdge/2, tft_middle_row + space*i + shortEdge*i, longEdge, shortEdge);
    }
    colourizeNew = values.poti_right_Y <= lowerBorder - i* 36.5;
    colourizeOld = values_old.poti_right_Y <= lowerBorder - i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_last_column-tft_quarter_column - longEdge/2, tft_middle_row + space*i + shortEdge*i, longEdge, shortEdge);
    }
    //left
    colourizeNew = values.poti_left_X <= lowerBorder - i* 36.5;
    colourizeOld = values_old.poti_left_X <= lowerBorder - i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_quarter_column - space*i - shortEdge*(i+1), tft_middle_row - longEdge/2, shortEdge, longEdge);
    }
    colourizeNew = values.poti_right_X <= lowerBorder - i* 36.5;
    colourizeOld = values_old.poti_right_X <= lowerBorder - i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_last_column-tft_quarter_column - space*i - shortEdge*(i+1), tft_middle_row - longEdge/2, shortEdge, longEdge);
    }
    //right
    colourizeNew = values.poti_left_X >= upperBorder + i* 36.5;
    colourizeOld = values_old.poti_left_X >= upperBorder + i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_quarter_column + space*i + shortEdge*i, tft_middle_row - longEdge/2, shortEdge, longEdge);
    }
    colourizeNew = values.poti_right_X >= upperBorder + i* 36.5;
    colourizeOld = values_old.poti_right_X >= upperBorder + i* 36.5;
    if (init || colourizeOld != colourizeNew) {
      setButtonColorBlue( colourizeNew );
      TFTscreen.rect(tft_last_column-tft_quarter_column + space*i + shortEdge*i, tft_middle_row - longEdge/2, shortEdge, longEdge);
    }
  }

  //buttoms bottom
  char buttonLength = 6*shortEdge + 6*space + boxLength;
  if (init || values_old.btn_bottom_left != values.btn_bottom_left) {
    setButtonColorGreen(values.btn_bottom_left & !init);
    TFTscreen.rect(tft_quarter_column - buttonLength/2, tft_middle_row + buttonLength/2 + 2*space, buttonLength, middleEdge);
  }
  if (init || values_old.btn_bottom_right != values.btn_bottom_right) {
    setButtonColorGreen(values.btn_bottom_right & !init);
    TFTscreen.rect(tft_last_column-tft_quarter_column - buttonLength/2, tft_middle_row + buttonLength/2 + 2*space, buttonLength, middleEdge);
  }
  //buttoms top
  if (init || values_old.btn_top_left != values.btn_top_left) {
    setButtonColorGreen(values.btn_top_left & !init);
    TFTscreen.rect(tft_quarter_column - buttonLength/2, tft_middle_row - buttonLength/2 - 2*space - middleEdge, buttonLength, middleEdge);
  }
  if (init || values_old.btn_top_right != values.btn_top_right) {
    setButtonColorGreen(values.btn_top_right & !init);
    TFTscreen.rect(tft_last_column-tft_quarter_column - buttonLength/2, tft_middle_row - buttonLength/2 - 2*space - middleEdge, buttonLength, middleEdge);
  }
  //buttons middle
  if (init || values_old.btn_middle_left != values.btn_middle_left) {
    setButtonColorGreen(values.btn_middle_left & !init);
    TFTscreen.rect(tft_quarter_column + buttonLength/2 + 2*space, tft_middle_row - buttonLength/2, middleEdge, buttonLength);
  }
  if (init || values_old.btn_middle_right != values.btn_middle_right) {
    setButtonColorGreen(values.btn_middle_right & !init);
    TFTscreen.rect(tft_last_column-tft_quarter_column - buttonLength/2 - 2*space - middleEdge, tft_middle_row - buttonLength/2, middleEdge, buttonLength);
  }

  // show initialized
  if (showInit) {
    TFTscreen.stroke(0,0,0);
    TFTscreen.setTextSize(1);
    TFTscreen.text("Control IT!", tft_first_column+6, tft_first_row+6);

    TFTscreen.stroke(255,255,255);
    TFTscreen.setTextSize(2);
    TFTscreen.text("Initialize", tft_first_column+4, tft_first_row+4);

    showsInitialize = true;
  }

  values_old = values;
}






void setup() {
  Serial.begin(115200);

  values.poti_left_Y = 255/2;
  values.poti_left_X = 255/2;
  values.poti_right_Y = 255/2;
  values.poti_right_X = 255/2;

  TFTscreen.begin();
  TFTscreen.background(0, 0, 0);
  showJoyStickScreen(true, true, false);

  radio.begin();
  radio.openWritingPipe(address);
  radio.setRetries(15, 15);
  radio.setPALevel(RF24_PA_MIN);
  radio.stopListening();

  //set led to blue
  rgbLed = new RgbLed(pinLedR, pinLedG, pinLedB);
  rgbLed->setLuminosity(luminosityLed);
  rgbLed->setBlue();

  softSerial.begin(SS_BAUD);

  Serial.println("Start");
}

int i=0;
char text[4];

void loop() {

  boolean dataRead = false;
  int startSignalCount = 0;
  while (!dataRead) {
    while (softSerial.available() > 0 && startSignalCount < 2) {
      char startSignal = softSerial.read();
      if (startSignal == '>') { startSignalCount++; }
      else {
        startSignalCount = 0;
        Serial.println("UART: skip");
      }
    }

    if (softSerial.available() >= sizeof(Button_Inputs)+1) {
      Button_Inputs data;
      if (readData(&data)) {
        values = data;
        RcHelper::printInputs(values);
      } else {
        Serial.println("UART: Warning: no valid data");
      }
      dataRead = true;
    }
  }

  if (values.btn_middle_left && !values.btn_middle_right) {
    modeA = false;
  } else if (!values.btn_middle_left && values.btn_middle_right) {
    modeA = true;
  }

  boolean hideInit = showsInitialize && values.initialized;
  boolean showInit = !showsInitialize && !values.initialized;
  if (showInit) rgbLed->setBlue();
  if (hideInit) rgbLed->setGreen();
  showJoyStickScreen(false, showInit, hideInit);

  if (values.initialized) {
    int data[9] = {512, 512, 1, 0, 1, 1, 512, 512, 512};
    data[0] = values.poti_right_X * 4;
    data[1] = values.poti_left_Y * 4;
    data[2] = values.btn_bottom_left;
    if (modeA) {
      data[3] = 0;
      data[4] = 1;
    } else {
      data[3] = 1;
      data[4] = 0;
    }
    data[5] = values.btn_bottom_right;
    data[6] = 512;
    data[7] = 512;
    data[8] = values.poti_right_Y * 4;

/*
    if (radio.write( data, sizeof(data) )) {
      Serial.println("NRF: Data wasa sent.");
    } else {
      Serial.println("NRF: Was not able to send data!");
    }
    delay(50);
*/
  }
}

